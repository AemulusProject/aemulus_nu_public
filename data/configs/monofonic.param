#########################################################################################
# Example config file for MUSIC2 - monofonIC single resolution simulation ICs
#                                                            version 1 from 2020/08/23
#########################################################################################

#########################################################################################
[setup]

GridRes         = {NpOneThird}      # number of grid cells per linear dimension for calculations 
                           #   = particles for sc initial load
BoxLength       = {BoxL}      # length of the box in Mpc/h
zstart          = {zini}     # starting redshift

LPTorder        = 3        # order of the LPT to be used (1,2 or 3)

DoBaryons       = no       # also do baryon ICs?
DoBaryonVrel    = no       # if doing baryons, incl. also relative velocity to linear order?
DoFixing        = no      # do mode fixing Ã  la Angulo&Pontzen (https://arxiv.org/abs/1603.05253)
DoInversion     = no       # invert phases (for paired simulations)

ParticleLoad    = sc       # particle load, can be 'sc' (1x), 'bcc' (2x) or 'fcc' (4x) 
                           # (increases number of particles by given factor!), or 'glass'

#DoDensityVelocityCorr = no # 1st order velocity correction: account for the initial difference between theta_cdm and delta_cdm on large scales

WithNeutrinos = yes         # master switch for enabling the following neutrino corrections

# Setting WithNeutrinos = yes enables each of the following (off by default). Uncomment for specific configurations.
#ExcludeNeutrinos = yes      # 0th order correction: set cdm particle masses proportional to Omega_cdm and not Omega_cdm + Omega_nu_massive
#CDMBaryonMatterOnly = yes   # 1st order correction: exclude neutrinos from the delta_matter and theta_matter transfer functions, i.e. dm = fb * db + fc * dc.
#DoNeutrinoPhi2Corr = no    # 2nd order correction: set the coefficient of the second order potential equal to the asymptotic value
#DoNeutrinoPhi3Corr = no    # 3rd order correction: set the coefficient of the third order potential equal to the asymptotic value

DoNeutrinoParticles = yes  # generate neutrino particles with FastDF?
NeutrinoCubeRootNum = {NpOneThird_nu}   # N, where the number of neutrino particles is N^3
NeutrinoGridRes = {NmOneThird_nu}       # force mesh resolution for integrating neutrinos (should be <= GridRes, typically much smaller)
NeutrinoStepSize = 0.05    # step size (delta log a) for integrating neutrinos
NeutrinoInterpOrder = 1    # interpolation order (1 = NGP, 2 = CIC): NGP is much faster but less accurate


## if `ParticleLoad = glass' then specify here where to load the glass distribution from
# GlassFileName   = glass128.hdf5
# GlassTiles      = 1

#########################################################################################
[cosmology]
#ParameterSet    = Planck2018EE+BAO+SN  # specify a pre-defined parameter set, or set to 'none' and set manually below
ParameterSet = none

## cosmological parameters, to set, choose ParameterSet = none,
## default values (those not specified) are set to the values
## from 'Planck2018EE+BAO+SN', we currently assume flatness
Omega_m         = {OmegaM}
Omega_b         = {OmegaB}
Omega_L         = {OmegaL}
H0              = {H0}
n_s             = {SpectralIndex}
A_s             = {As}  # can use A_s instead of sigma_8 when using CLASS
N_nu_massive    = 3
N_ur            = 0.00641
m_nu1           = {nu_mass_ev_ov_3}
m_nu2           = 0.0
m_nu3           = 0.0
deg_nu1         = 3.0
deg_nu2         = 0.0
deg_nu3         = 0.0
w_0             = {w0}

ZeroRadiation   = false  # For Back-scaling only: set to true if your simulation code 
                         # cannot deal with Omega_r!=0 in its background FLRW model

##> CLASS module, which links to the actual CLASS C-code.
## note that CLASS needs to be cloned as a git submodule and enabled in CMake file
#transfer        = CLASS          
#ztarget         = 0.0             # target redshift for CLASS module, output at ztarget will be back-scaled to zstart

##> For neutrino models, we provide the zwindstroom module, which links both to
## the CLASS and zwindstroom C-codes. The former is used to provide the initial
## transfer functions and the latter for scale-dependent growth factors from a
## calculation of a Newtonian 3-fluid model with baryons + cdm + neutrinos.
## Unlike the CLASS plugin, this also outputs (nearly) exact N-body gauge
## transfer functions.
## It will also account for neutrinos in the Hubble rate, which enters
## into the conversion factor between displacements and velocities.
## Note that both CLASS and zwindstroom need to be cloned as git submodules
## and enabled in the CMake file.

transfer        = zwindstroom
ztarget         = 0.0          # target redshift, output at ztarget will be back-scaled to zstart

#########################################################################################
[random]
##> NGenIC compatible random number generator module compatible with V. Springel's original code
## (https://www.h-its.org/2014/11/05/ngenic-code/) as well as the 2LPT code by Pueblas&Scoccmiarro
## (https://cosmo.nyu.edu/roman/2LPT/)
generator      = NGENIC
seed           = {seed}

#########################################################################################
[execution]
# Specify the number of threads / task
NumThreads      = 1

#########################################################################################
[output]


##> Gadget-2/3 HDF5 format
format          = gadget_hdf5
filename        = {3LPTFile}
